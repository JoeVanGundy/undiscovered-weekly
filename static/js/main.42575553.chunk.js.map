{"version":3,"sources":["components/playlists.js","components/recommendations.js","components/popularity.js","components/genres.js","App.js","serviceWorker.js","index.js"],"names":["Playlists","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playlists","changeSelect","bind","assertThisInitialized","savePlaylist","getUsersPlaylist","_this2","spotifyApi","getUserPlaylists","limit","then","response","setState","_this3","getMe","createPlaylist","id","name","event","_this4","chosenPlaylist","createNewPlaylist","selectCreatedPlaylist","replacePlaylist","onPlaylistSelect","_this5","undefined","items","keys","map","key","react_default","a","createElement","class","style","width","marginRight","marginLeft","onChange","selected","value","type","onClick","React","Component","Recommendations","recommendations","topTracks","topArtists","availableGenres","updateRecommendations","target","options","selectedIndex","playlist","replaceTracksInPlaylist","getTrackUris","selectedGenres","length","join","usersFavoriteGenress","promises","i","push","getRecommendations","seed_genres","getSelectedGenres","max_popularity","Promise","all","artists","forEach","recommendation","toConsumableArray","Set","unpopularArtists","artist","getArtistTopTracks","popularity","j","temparray","slice","getArtists","artistsTopTracks","artistsTopTrack","artistTopTracks","tracks","object","flat","concat","trackUris","track","uri","getRecommendationsFromGenres","uniqueArtists","getArtistsFromRecommendations","JSON","parse","stringify","flatten","getUnpopularArtists","maxPopularity","getArtistsTopTracks","getTopTrackFromArtistsTopTracks","className","index","album","components_playlists","Popularity","selectedTab","handleSelect","maxPop","handlePopularityChange","data-toggle","isActive","autocomplete","Genres","handleCheck","chooseFavorite","toggleUseFavorite","handleGenreCheck","includes","checked","favoriteGenres","for","genres","genre","margin","SpotifyWebApi","scopes","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","App","token","getHashParams","access_token","loggedIn","usersFavoriteGenres","onGenreCheck","filter","_","indexOf","e","hashParams","r","q","exec","getMyTopArtists","time_range","dict","replace","subGenre","result","sort","b","_token","setAccessToken","getUsersTopGenres","components_recommendations","href","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oSA6EeA,cAzEX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,UAAW,IAEfR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IANLA,mFAUfG,KAAKU,8DAGU,IAAAC,EAAAX,KACfA,KAAKJ,MAAMgB,WAAWC,iBAAiB,CAACC,MAAO,KAC1CC,KAAK,SAACC,GACHL,EAAKM,SAAS,CAAEZ,UAAWW,kDAInB,IAAAE,EAAAlB,KAChB,OAAOA,KAAKJ,MAAMgB,WAAWO,QACxBJ,KAAK,SAACC,GACH,OAAOE,EAAKtB,MAAMgB,WAAWQ,eAAeJ,EAASK,GAAI,CAACC,KAAM,+DAI/DC,GAAO,IAAAC,EAAAxB,KACiB,KAA9BA,KAAKJ,MAAM6B,gBACVzB,KAAK0B,oBACJX,KAAK,SAACC,GACHQ,EAAK5B,MAAM+B,sBAAsBX,EAASK,MAE7CN,KAAK,SAACC,GACHQ,EAAK5B,MAAMgC,oBAGnB5B,KAAKJ,MAAMgC,uDAIFL,GACTvB,KAAKJ,MAAMiC,iBAAiBN,oCAGvB,IAAAO,EAAA9B,KACDK,EAAY,GAMhB,YALmC0B,IAA/B/B,KAAKI,MAAMC,UAAU2B,QACrB3B,EAAYP,OAAOmC,KAAKjC,KAAKI,MAAMC,UAAU2B,OAAOE,IAAI,SAAAC,GAAG,OACvDC,EAAAC,EAAAC,cAAA,UAAQjB,GAAIS,EAAK1B,MAAMC,UAAU2B,MAAMG,GAAKd,IAAKS,EAAK1B,MAAMC,UAAU2B,MAAMG,GAAKb,SAIrFc,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gCACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACPH,EAAAC,EAAAC,cAAA,oDAEJF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cAAcC,MAAO,CAACC,MAAO,MAAOC,YAAa,OAAQC,WAAY,SAC5EP,EAAAC,EAAAC,cAAA,UAAQC,MAAM,gBAAgBK,SAAU5C,KAAKM,cACzC8B,EAAAC,EAAAC,cAAA,UAAQO,UAAQ,EAACxB,GAAG,UAAUyB,OAAK,GAAnC,6BACCzC,GAEL+B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,sBACPH,EAAAC,EAAAC,cAAA,UAAQC,MAAM,oBAAoBQ,KAAK,SAASC,QAAShD,KAAKS,cAA9D,4BAjEJwC,IAAMC,WCqVfC,cApVX,SAAAA,EAAYvD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmD,IACftD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqD,GAAAhD,KAAAH,KAAMJ,KACDQ,MAAQ,CACTgD,gBAAiB,GACjBC,UAAW,GACXC,WAAY,GACZ7B,eAAgB,GAChB8B,gBAAiB,CACb,WACA,WACA,WACA,cACA,UACA,QACA,cACA,YACA,QACA,YACA,SACA,YACA,UACA,WACA,gBACA,WACA,QACA,YACA,OACA,SACA,UACA,QACA,YACA,cACA,aACA,iBACA,QACA,SACA,gBACA,MACA,UACA,MACA,UACA,aACA,MACA,OACA,QACA,SACA,OACA,SACA,SACA,SACA,OACA,YACA,SACA,SACA,SACA,QACA,YACA,WACA,YACA,cACA,UACA,WACA,aACA,QACA,MACA,SACA,QACA,YACA,aACA,UACA,UACA,SACA,QACA,SACA,OACA,QACA,OACA,QACA,SACA,QACA,WACA,QACA,aACA,YACA,iBACA,SACA,MACA,UACA,cACA,QACA,SACA,QACA,kBACA,QACA,MACA,WACA,eACA,YACA,oBACA,aACA,OACA,YACA,QACA,YACA,SACA,YACA,YACA,OACA,cACA,aACA,UACA,MACA,QACA,QACA,YACA,aACA,oBACA,MACA,QACA,aACA,OACA,cACA,UACA,QACA,SACA,UACA,YACA,QACA,SACA,SACA,WACA,UACA,WACA,gBAER1D,EAAK2D,sBAAwB3D,EAAK2D,sBAAsBjD,KAA3BT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IAE/C,OAAOF,GACN,IAELL,OAAOC,SAASF,KAAO,OA8RRU,cA1Rb,SAAAA,IAAc,IAAArJ,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkJ,GAEZ,IACMC,GAFNtJ,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoJ,GAAA/I,KAAAH,QACoBoJ,gBACCC,aAHT,OAIZxJ,EAAKO,MAAQ,CACX+I,MAAO,KACVG,WAAUH,EACVpF,eAAgB,GAChBwF,oBAAqB,GACrB5C,cAAe,GACfpD,gBAAiB,CAChB,WACA,WACA,WACA,cACA,UACA,QACA,cACA,YACA,QACA,YACA,SACA,YACA,UACA,WACA,gBACA,WACA,QACA,YACA,OACA,SACA,UACA,QACA,YACA,cACA,aACA,iBACA,QACA,SACA,gBACA,MACA,UACA,MACA,UACA,aACA,MACA,OACA,QACA,SACA,OACA,SACA,SACA,SACA,OACA,YACA,SACA,SACA,SACA,QACA,YACA,WACA,YACA,cACA,UACA,WACA,aACA,QACA,MACA,SACA,QACA,YACA,aACA,UACA,UACA,SACA,QACA,SACA,OACA,QACA,OACA,QACA,SACA,QACA,WACA,QACA,aACA,YACA,iBACA,SACA,MACA,UACA,cACA,QACA,SACA,QACA,kBACA,QACA,MACA,WACA,eACA,YACA,oBACA,aACA,OACA,YACA,QACA,YACA,SACA,YACA,YACA,OACA,cACA,aACA,UACA,MACA,QACA,QACA,YACA,aACA,oBACA,MACA,QACA,aACA,OACA,cACA,UACA,QACA,SACA,UACA,YACA,QACA,SACA,SACA,WACA,UACA,WACA,gBAGA1D,EAAK2J,aAAe3J,EAAK2J,aAAajJ,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAEtBA,EAAKyH,uBAAyBzH,EAAKyH,uBAAuB/G,KAA5BT,OAAAU,EAAA,EAAAV,CAAAD,IA7IhBA,sFAoJQiD,GACtB9C,KAAKiB,SAAS,CAAC0F,cAAe7D,yCAGjBvB,GAAO,IAAAZ,EAAAX,KACpB,GAAIA,KAAKI,MAAM2D,eAAegE,SAASxG,EAAMkC,OAAOpC,IACnDrB,KAAKiB,SAAS,CACb8C,eAAgB/D,KAAKI,MAAM2D,eAAe0F,OAAO,SAACC,EAAGtF,GAAJ,OAAUA,IAAMzD,EAAKP,MAAM2D,eAAe4F,QAAQpI,EAAMkC,OAAOpC,YAG7G,IAAIrB,KAAKI,MAAM2D,eAAeC,OAAS,EAC3C,OAEAhE,KAAKiB,SAAS,CACb8C,eAAc,GAAAgC,OAAAjG,OAAAiF,EAAA,EAAAjF,CAAME,KAAKI,MAAM2D,gBAAjB,CAAiCxC,EAAMkC,OAAOpC,gDAsB5D,IACIuI,EADAC,EAAa,GACVC,EAAI,uBACTC,EAAItB,OAAOC,SAASF,KAAKG,UAAU,GAErC,IADAiB,EAAIE,EAAEE,KAAKD,GACJH,GACLC,EAAWD,EAAE,IAAMX,mBAAmBW,EAAE,IACxCA,EAAIE,EAAEE,KAAKD,GAEb,OAAOF,yKAKLtG,EAAkBvD,KAAKI,MAAMmD,yBACV3C,EAAWqJ,gBAAgB,CAAEnJ,MAAO,GAAIoJ,WAAY,6BAArElJ,SACFmJ,EAAO,GACXnJ,EAASgB,MAAM6C,QAAQ,SAAUK,GAChCA,EAAOiD,OAAOtD,QAAQ,SAAUuD,IAC/BA,EAAQA,EAAMgC,QAAQ,IAAK,MACXxB,MAAM,KAClB/D,QAAQ,SAAUwF,GACjB9G,EAAgBwE,SAASsC,KACtBA,KAAYF,EAIjBA,EAAKE,KAHLF,EAAKE,GAAY,SASlBC,EAASxK,OAAOmC,KAAKkI,GAAMI,KAAK,SAAUlI,EAAGmI,GAChD,OAAOL,EAAKK,GAAKL,EAAK9H,uBAEhBiI,EAAO/E,MAAM,EAAG,GAAGtB,KAAK,qJAIX,IAAA/C,EAAAlB,KAEhByK,EAASjC,EAAKa,aACdoB,IACH7J,EAAW8J,eAAeD,GAE1BzK,KAAKiB,SAAS,CACbkI,MAAOsB,IAERzK,KAAK2K,oBACH5J,KAAK,SAACC,GACNE,EAAKD,SAAS,CAAEsI,oBAAqBvI,wCAQxC,IAAIoC,EAOF,OALDA,EADGpD,KAAKI,MAAMmJ,oBAAoBvF,OAAS,EACzB5B,EAAAC,EAAAC,cAACsI,EAAD,CAAiBhK,WAAYA,EAAY+F,cAAe3G,KAAKI,MAAMuG,cAAe5C,eAAgB/D,KAAKI,MAAM2D,eAAgBG,qBAAsBlE,KAAKI,MAAMmJ,sBAE9J,KAIfnH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YAAYuE,UAAU,QACjC9G,KAAKI,MAAM+I,OACP/G,EAAAC,EAAAC,cAAA,OAAKC,MAAM,2BACTH,EAAAC,EAAAC,cAAA,KAAGwE,UAAU,0BAA0B+D,KAAI,GAAA9E,OA1R3B,yCA0R2B,eAAAA,OAvRtC,mCAuRsC,kBAAAA,OAtRnC,qDAsRmC,WAAAA,OAA6EwC,EAAOtE,KAAK,OAAzF,0CAA3C,qBAKHjE,KAAKI,MAAM+I,OACV/G,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACTH,EAAAC,EAAAC,cAAA,kCAEDF,EAAAC,EAAAC,cAAC6F,EAAD,CAAQA,OAAQnI,KAAKI,MAAMmD,gBAAiBuE,iBAAkB9H,KAAKwJ,aAAcvB,eAAgBjI,KAAKI,MAAMmJ,oBAAqBxF,eAAgB/D,KAAKI,MAAM2D,iBAC5J3B,EAAAC,EAAAC,cAAC8C,EAAD,CAAYkC,uBAAwBtH,KAAKsH,yBAKxClE,GAGHhB,EAAAC,EAAAC,cAAA,UAAQjB,GAAG,gBAAgBkB,MAAM,8BAChCH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,yBACVH,EAAAC,EAAAC,cAAA,gDAnRYY,aC1BE4H,QACW,cAA7BrC,OAAOC,SAASqC,UAEe,UAA7BtC,OAAOC,SAASqC,UAEhBtC,OAAOC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OAAO9I,EAAAC,EAAAC,cAAC6I,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzK,KAAK,SAAA0K,GACjCA,EAAaC","file":"static/js/main.42575553.chunk.js","sourcesContent":["import React from 'react'; // get the React object from the react module\n\n\nclass Playlists extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playlists: {}\n        }\n        this.changeSelect = this.changeSelect.bind(this);\n        this.savePlaylist = this.savePlaylist.bind(this);\n    }\n\n    componentDidMount() {\n        this.getUsersPlaylist()\n    }\n\n    getUsersPlaylist() {\n        this.props.spotifyApi.getUserPlaylists({limit: 50})\n            .then((response) => {\n                this.setState({ playlists: response });\n            })\n    }\n\n    createNewPlaylist() {\n        return this.props.spotifyApi.getMe()\n            .then((response) => {\n                return this.props.spotifyApi.createPlaylist(response.id, {name: \"Undiscovered Weekly\"})\n            })\n    }\n\n    savePlaylist(event) {\n        if(this.props.chosenPlaylist === \"\") {\n            this.createNewPlaylist()\n            .then((response) => {\n                this.props.selectCreatedPlaylist(response.id)\n            })\n            .then((response) => {\n                this.props.replacePlaylist()\n            })\n        }\n        this.props.replacePlaylist()\n\n    }\n\n    changeSelect(event){\n        this.props.onPlaylistSelect(event);\n    }\n\n    render() {\n        var playlists = []\n        if (this.state.playlists.items !== undefined) {\n            playlists = Object.keys(this.state.playlists.items).map(key =>\n                <option id={this.state.playlists.items[key].id}>{this.state.playlists.items[key].name}</option>\n            )\n        }\n        return (\n            <div class=\"card text-white bg-dark mb-3\">\n                <div class=\"card-header\">\n                    <h4>Where you like to save your playlist?</h4>\n                </div>\n                <div class=\"card-body\">\n                    <div class=\"input-group\" style={{width: \"50%\", marginRight: \"auto\", marginLeft: \"auto\"}}>\n                        <select class=\"custom-select\" onChange={this.changeSelect}>\n                            <option selected id=\"default\" value>---Create New Playlist---</option>\n                            {playlists}\n                        </select>\n                        <div class=\"input-group-append\">\n                            <button class=\"btn btn-secondary\" type=\"button\" onClick={this.savePlaylist}>Save Playlist</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Playlists","import React from 'react';\nimport Playlists from './playlists';\n\nclass Recommendations extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            recommendations: [],\n            topTracks: [],\n            topArtists: [],\n            chosenPlaylist: \"\",\n            availableGenres: [\n                \"acoustic\",\n                \"afrobeat\",\n                \"alt-rock\",\n                \"alternative\",\n                \"ambient\",\n                \"anime\",\n                \"black-metal\",\n                \"bluegrass\",\n                \"blues\",\n                \"bossanova\",\n                \"brazil\",\n                \"breakbeat\",\n                \"british\",\n                \"cantopop\",\n                \"chicago-house\",\n                \"children\",\n                \"chill\",\n                \"classical\",\n                \"club\",\n                \"comedy\",\n                \"country\",\n                \"dance\",\n                \"dancehall\",\n                \"death-metal\",\n                \"deep-house\",\n                \"detroit-techno\",\n                \"disco\",\n                \"disney\",\n                \"drum-and-bass\",\n                \"dub\",\n                \"dubstep\",\n                \"edm\",\n                \"electro\",\n                \"electronic\",\n                \"emo\",\n                \"folk\",\n                \"forro\",\n                \"french\",\n                \"funk\",\n                \"garage\",\n                \"german\",\n                \"gospel\",\n                \"goth\",\n                \"grindcore\",\n                \"groove\",\n                \"grunge\",\n                \"guitar\",\n                \"happy\",\n                \"hard-rock\",\n                \"hardcore\",\n                \"hardstyle\",\n                \"heavy-metal\",\n                \"hip-hop\",\n                \"holidays\",\n                \"honky-tonk\",\n                \"house\",\n                \"idm\",\n                \"indian\",\n                \"indie\",\n                \"indie-pop\",\n                \"industrial\",\n                \"iranian\",\n                \"j-dance\",\n                \"j-idol\",\n                \"j-pop\",\n                \"j-rock\",\n                \"jazz\",\n                \"k-pop\",\n                \"kids\",\n                \"latin\",\n                \"latino\",\n                \"malay\",\n                \"mandopop\",\n                \"metal\",\n                \"metal-misc\",\n                \"metalcore\",\n                \"minimal-techno\",\n                \"movies\",\n                \"mpb\",\n                \"new-age\",\n                \"new-release\",\n                \"opera\",\n                \"pagode\",\n                \"party\",\n                \"philippines-opm\",\n                \"piano\",\n                \"pop\",\n                \"pop-film\",\n                \"post-dubstep\",\n                \"power-pop\",\n                \"progressive-house\",\n                \"psych-rock\",\n                \"punk\",\n                \"punk-rock\",\n                \"r-n-b\",\n                \"rainy-day\",\n                \"reggae\",\n                \"reggaeton\",\n                \"road-trip\",\n                \"rock\",\n                \"rock-n-roll\",\n                \"rockabilly\",\n                \"romance\",\n                \"sad\",\n                \"salsa\",\n                \"samba\",\n                \"sertanejo\",\n                \"show-tunes\",\n                \"singer-songwriter\",\n                \"ska\",\n                \"sleep\",\n                \"songwriter\",\n                \"soul\",\n                \"soundtracks\",\n                \"spanish\",\n                \"study\",\n                \"summer\",\n                \"swedish\",\n                \"synth-pop\",\n                \"tango\",\n                \"techno\",\n                \"trance\",\n                \"trip-hop\",\n                \"turkish\",\n                \"work-out\",\n                \"world-music\"],\n        }\n        this.updateRecommendations = this.updateRecommendations.bind(this);\n        this.onPlaylistSelect = this.onPlaylistSelect.bind(this);\n        this.replacePlaylist = this.replacePlaylist.bind(this);\n        this.getUsersPlaylist = this.getUsersPlaylist.bind(this);\n        this.selectCreatedPlaylist = this.selectCreatedPlaylist.bind(this);\n        // this.handleChange = this.handleChange.bind(this);\n    }\n\n\n    getUsersPlaylist() {\n        this.props.spotifyApi.getUserPlaylists()\n            .then((response) => {\n        })\n    }\n\n\n    onPlaylistSelect(event) {\n        this.setState({ chosenPlaylist: event.target.options[event.target.selectedIndex].id });\n    }\n\n    selectCreatedPlaylist(playlist) {\n        this.setState({ chosenPlaylist: playlist });\n    }\n\n    // Replace all the existing tracks in the playlist with the new recommendations\n    replacePlaylist(recommendations) {\n        this.props.spotifyApi.replaceTracksInPlaylist(this.state.chosenPlaylist, this.getTrackUris(recommendations))\n            .then((response) => {\n            });\n    }\n\n\n    getSelectedGenres() {\n        if (this.props.selectedGenres.length != 0) {\n            return this.props.selectedGenres.join(',')\n        } else {\n            return this.props.usersFavoriteGenress\n        }\n    }\n\n    // Returns track recommendations from genres\n    getRecommendationsFromGenres() {\n        var promises = []\n        for (var i = 0; i < 5; i++) {\n            promises.push(this.props.spotifyApi.getRecommendations({ seed_genres: this.getSelectedGenres(), max_popularity: 100, limit: 100 }));\n        }\n        return Promise.all(promises)\n    }\n\n\n\n\n    // Returns track recommendations from genres\n    getRecommendationsFromGenres() {\n        var promises = []\n        for (var i = 0; i < 5; i++) {\n            promises.push(this.props.spotifyApi.getRecommendations({ seed_genres: this.getSelectedGenres(), max_popularity: 100, limit: 100 }));\n        }\n        return Promise.all(promises)\n    }\n\n    getArtistsFromRecommendations(recommendations) {\n        var artists = []\n        recommendations.forEach(function (recommendation) {\n            artists.push(recommendation.artists[0].id)\n        });\n        let uniqueArtists = [...new Set(artists)];\n        return uniqueArtists\n    }\n\n    // Return the top tracks for multiple artists\n    getArtistsTopTracks(unpopularArtists) {\n        var promises = [];\n        unpopularArtists.map((artist, i) => {\n            promises.push(this.props.spotifyApi.getArtistTopTracks(artist.id, 'US'));\n        })\n        return Promise.all(promises)\n    }\n\n    getArtistsFromRecommendations(recommendations) {\n        var artists = []\n        recommendations.forEach(function (recommendation) {\n            artists.push(recommendation.artists[0].id)\n        });\n        let uniqueArtists = [...new Set(artists)];\n        return uniqueArtists\n    }\n\n    // Get list of artists with popularity less than the popularity variable\n    getUnpopularArtists(artists, popularity) {\n        const numberOfRecommendations = 30;\n        var unpopularArtists = []\n        artists.forEach(function (artist) {\n            if (artist.popularity < popularity) {\n                unpopularArtists.push(artist)\n            }\n        });\n        unpopularArtists.length = numberOfRecommendations\n        return unpopularArtists\n    }\n\n    getArtists(artists) {\n        var promises = []\n        var i, j, temparray, chunk = 50;\n        for (i = 0, j = artists.length; i < j; i += chunk) {\n            temparray = artists.slice(i, i + chunk);\n            promises.push(this.props.spotifyApi.getArtists(temparray))\n        }\n        return Promise.all(promises)\n    }\n\n\n\n    // Return the top track from multiple artists top tracks\n    getTopTrackFromArtistsTopTracks(artistsTopTracks) {\n        var artistsTopTrack = []\n        artistsTopTracks.forEach(function (artistTopTracks) {\n            if (artistTopTracks.tracks.length > 0) {\n                artistsTopTrack.push(artistTopTracks.tracks[0])\n            }\n        });\n        return artistsTopTrack\n    }\n\n\n    flatten(object, type) {\n        var flat = [];\n        for (var i = 0; i < object.length; i++) {\n            if (type === 'tracks') {\n                flat = flat.concat(object[i].tracks);\n            } else {\n                flat = flat.concat(object[i].artists);\n            }\n        }\n        return flat\n    }\n\n    // Returns the uris of the tracks to be put in the playlist\n    getTrackUris() {\n        var trackUris = []\n        this.state.recommendations.forEach(function (track) {\n            trackUris.push(track.uri)\n        });\n        return trackUris\n    }\n\n    updateRecommendations() {\n        this.getRecommendationsFromGenres()\n            .then((response) => {\n                var uniqueArtists = this.getArtistsFromRecommendations(JSON.parse(JSON.stringify(this.flatten(response, 'tracks'))))\n                return this.getArtists(uniqueArtists)\n            })\n            .then((response) => {\n                var unpopularArtists = this.getUnpopularArtists(JSON.parse(JSON.stringify(this.flatten(response, 'artists'))), this.props.maxPopularity)\n                return this.getArtistsTopTracks(unpopularArtists)\n            })\n            .then((response) => {\n                var recommendations = this.getTopTrackFromArtistsTopTracks(response)\n                this.setState({ recommendations: recommendations })\n            })\n    }\n\n    componentDidMount() {\n        this.updateRecommendations()\n    }\n\n    render() {\n        return (\n            <div>\n                <div class=\"card text-white bg-dark mb-3\">\n                    <div class=\"card-body\">\n                        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => this.updateRecommendations()}>\n                            Get New Recommendations\n                        </button>\n                        <table class=\"table table-dark table-hover\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>Artist</th>\n                                    <th>Title</th>\n                                    <th>Album</th>\n                                    <th>Top Track Popularity</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.state.recommendations.map((recommendation, index) => (\n                                    <tr>\n                                        <td>{index+1}</td>\n                                        <td>{recommendation.artists[0].name}</td>\n                                        <td>{recommendation.name}</td>\n                                        <td>{recommendation.album.name}</td>\n                                        <td>{recommendation.popularity}</td>\n                                    </tr>\n                                ))}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                <Playlists spotifyApi={this.props.spotifyApi} onPlaylistSelect={this.onPlaylistSelect} replacePlaylist={this.replacePlaylist} selectCreatedPlaylist={this.selectCreatedPlaylist} chosenPlaylist={this.state.chosenPlaylist} />\n            </div>\n            \n        );\n    }\n}\n\nexport default Recommendations\n","import React from 'react'; // get the React object from the react module\n\n\nclass Popularity extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            playlists: {},\n            selectedTab: null\n        }\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleSelect(event) {\n        this.setState({ selectedTab: event.target.id })\n        var maxPop = 50;\n        switch (event.target.id) {\n            case 'lowMainstream':\n                maxPop = 40;\n                break;\n            case 'middleMainstream':\n                maxPop = 60;\n                break;\n            case 'highMainstream':\n                maxPop = 80;\n                break;\n            default:\n                maxPop = 50;\n        }\n        this.props.handlePopularityChange(maxPop)\n    }\n\n    isActive(name) {\n        return this.state.selectedTab === name ? 'btn btn-secondary active' : 'btn btn-secondary'\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n\n        return (\n            <div >\n                <div class=\"card text-white bg-dark mb-3\">\n                    <div class=\"card-header\">\n                        <h4>How mainstream would you like your playlist?</h4>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\" onChange={this.handleSelect}>\n                            <label className={this.isActive('lowMainstream')}>\n                                <input type=\"radio\" name=\"options\" id=\"lowMainstream\" autocomplete=\"off\" />\n                                Not Mainstream\n                            </label>\n                            <label className={this.isActive('middleMainstream')}>\n                                <input type=\"radio\" name=\"options\" id=\"middleMainstream\" autocomplete=\"off\" />\n                                Somewhere in the middle\n                            </label>\n                            <label className={this.isActive('highMainstream')}>\n                                <input type=\"radio\" name=\"options\" id=\"highMainstream\" autocomplete=\"off\" />\n                                Mainstream\n                            </label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Popularity","import React from 'react'; // get the React object from the react module\n\nclass Genres extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleCheck = this.handleCheck.bind(this);\n        this.state = {\n            chooseFavorite: false\n        }\n        this.toggleUseFavorite = this.toggleUseFavorite.bind(this);\n    }\n\n    handleCheck(event){\n        this.props.handleGenreCheck(event)\n    }\n\n    isActive(name){\n        return this.props.selectedGenres.includes(name) ? 'btn btn-secondary active' : 'btn btn-secondary'\n    }\n\n    toggleUseFavorite(event){\n        this.setState({chooseFavorite: event.target.checked})\n    }\n\n    render() {\n        return (\n            <div class=\"card text-white bg-dark mb-3\">\n                <div class=\"card-header\">\n                    <h4>We determined your favorite genres are: {this.props.favoriteGenres}</h4>\n                    <div class=\"custom-control custom-switch\">\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\" onChange={this.toggleUseFavorite} />\n                        <label class=\"custom-control-label\" for=\"customSwitch1\">Would you like to customize your favorite genres?</label>\n                    </div>\n                </div>\n                \n                {this.state.chooseFavorite &&\n                <div class=\"card-body\">\n                    <div class=\"btn-group-toggle\" data-toggle=\"buttons\">\n                        {this.props.genres.map((genre) => (\n                            // <div class=\"custom-control custom-checkbox custom-control-inline\">\n                            //     <input type=\"checkbox\" class=\"custom-control-input\" id={genre} onClick={this.handleCheck}></input>\n                            //     <label class=\"custom-control-label\" for={genre}>{genre}</label>\n                            // </div>\n                            // <div class=\"custom-control custom-button custom-control-inline\" style={{marginTop:\"5px\", marginBottom:\"5px\"}} onClick={this.handleCheck}>\n                            //     <button className={this.isActive(genre)}>{genre}</button>\n                            // </div>\n                            <label style={{margin:\"5px\"}} className={this.isActive(genre)}>\n                                <input type=\"checkbox\" class=\"custom-control-input\" autocomplete=\"off\" id={genre} onClick={this.handleCheck}/>{genre}\n                            </label>\n                        ))}\n                    </div>\n                </div>\n                }\n\n            </div>\n        );\n    }\n}\n\nexport default Genres","import React, { Component } from 'react';\nimport Recommendations from './components/recommendations'\nimport Popularity from './components/popularity'\nimport Genres from './components/genres';\nimport './App.css';\n\nimport SpotifyWebApi from 'spotify-web-api-js';\n\nconst spotifyApi = new SpotifyWebApi();\n\nexport const authEndpoint = 'https://accounts.spotify.com/authorize';\n\n// Replace with your app's client ID, redirect URI and desired scopes\nconst clientId = \"670b1531e1d74e8c97c3c81aaa6fc9b0\";\nconst redirectUri = \"https://joevangundy.github.io/undiscovered-weekly/\";\nconst scopes = [\n  \"user-read-private\",\n  \"user-read-email\",\n  \"user-read-playback-state\",\n  \"user-top-read\",\n  \"playlist-modify-public\"\n];\n\n// Get the hash of the url\nconst hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function (initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\n\nwindow.location.hash = \"\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    this.state = {\n      token: null,\n\t\t\tloggedIn: token ? true : false,\n\t\t\tselectedGenres: [],\n\t\t\tusersFavoriteGenres: [],\n\t\t\tmaxPopularity: 50,\n\t\t\tavailableGenres: [\n\t\t\t\t\"acoustic\",\n\t\t\t\t\"afrobeat\",\n\t\t\t\t\"alt-rock\",\n\t\t\t\t\"alternative\",\n\t\t\t\t\"ambient\",\n\t\t\t\t\"anime\",\n\t\t\t\t\"black-metal\",\n\t\t\t\t\"bluegrass\",\n\t\t\t\t\"blues\",\n\t\t\t\t\"bossanova\",\n\t\t\t\t\"brazil\",\n\t\t\t\t\"breakbeat\",\n\t\t\t\t\"british\",\n\t\t\t\t\"cantopop\",\n\t\t\t\t\"chicago-house\",\n\t\t\t\t\"children\",\n\t\t\t\t\"chill\",\n\t\t\t\t\"classical\",\n\t\t\t\t\"club\",\n\t\t\t\t\"comedy\",\n\t\t\t\t\"country\",\n\t\t\t\t\"dance\",\n\t\t\t\t\"dancehall\",\n\t\t\t\t\"death-metal\",\n\t\t\t\t\"deep-house\",\n\t\t\t\t\"detroit-techno\",\n\t\t\t\t\"disco\",\n\t\t\t\t\"disney\",\n\t\t\t\t\"drum-and-bass\",\n\t\t\t\t\"dub\",\n\t\t\t\t\"dubstep\",\n\t\t\t\t\"edm\",\n\t\t\t\t\"electro\",\n\t\t\t\t\"electronic\",\n\t\t\t\t\"emo\",\n\t\t\t\t\"folk\",\n\t\t\t\t\"forro\",\n\t\t\t\t\"french\",\n\t\t\t\t\"funk\",\n\t\t\t\t\"garage\",\n\t\t\t\t\"german\",\n\t\t\t\t\"gospel\",\n\t\t\t\t\"goth\",\n\t\t\t\t\"grindcore\",\n\t\t\t\t\"groove\",\n\t\t\t\t\"grunge\",\n\t\t\t\t\"guitar\",\n\t\t\t\t\"happy\",\n\t\t\t\t\"hard-rock\",\n\t\t\t\t\"hardcore\",\n\t\t\t\t\"hardstyle\",\n\t\t\t\t\"heavy-metal\",\n\t\t\t\t\"hip-hop\",\n\t\t\t\t\"holidays\",\n\t\t\t\t\"honky-tonk\",\n\t\t\t\t\"house\",\n\t\t\t\t\"idm\",\n\t\t\t\t\"indian\",\n\t\t\t\t\"indie\",\n\t\t\t\t\"indie-pop\",\n\t\t\t\t\"industrial\",\n\t\t\t\t\"iranian\",\n\t\t\t\t\"j-dance\",\n\t\t\t\t\"j-idol\",\n\t\t\t\t\"j-pop\",\n\t\t\t\t\"j-rock\",\n\t\t\t\t\"jazz\",\n\t\t\t\t\"k-pop\",\n\t\t\t\t\"kids\",\n\t\t\t\t\"latin\",\n\t\t\t\t\"latino\",\n\t\t\t\t\"malay\",\n\t\t\t\t\"mandopop\",\n\t\t\t\t\"metal\",\n\t\t\t\t\"metal-misc\",\n\t\t\t\t\"metalcore\",\n\t\t\t\t\"minimal-techno\",\n\t\t\t\t\"movies\",\n\t\t\t\t\"mpb\",\n\t\t\t\t\"new-age\",\n\t\t\t\t\"new-release\",\n\t\t\t\t\"opera\",\n\t\t\t\t\"pagode\",\n\t\t\t\t\"party\",\n\t\t\t\t\"philippines-opm\",\n\t\t\t\t\"piano\",\n\t\t\t\t\"pop\",\n\t\t\t\t\"pop-film\",\n\t\t\t\t\"post-dubstep\",\n\t\t\t\t\"power-pop\",\n\t\t\t\t\"progressive-house\",\n\t\t\t\t\"psych-rock\",\n\t\t\t\t\"punk\",\n\t\t\t\t\"punk-rock\",\n\t\t\t\t\"r-n-b\",\n\t\t\t\t\"rainy-day\",\n\t\t\t\t\"reggae\",\n\t\t\t\t\"reggaeton\",\n\t\t\t\t\"road-trip\",\n\t\t\t\t\"rock\",\n\t\t\t\t\"rock-n-roll\",\n\t\t\t\t\"rockabilly\",\n\t\t\t\t\"romance\",\n\t\t\t\t\"sad\",\n\t\t\t\t\"salsa\",\n\t\t\t\t\"samba\",\n\t\t\t\t\"sertanejo\",\n\t\t\t\t\"show-tunes\",\n\t\t\t\t\"singer-songwriter\",\n\t\t\t\t\"ska\",\n\t\t\t\t\"sleep\",\n\t\t\t\t\"songwriter\",\n\t\t\t\t\"soul\",\n\t\t\t\t\"soundtracks\",\n\t\t\t\t\"spanish\",\n\t\t\t\t\"study\",\n\t\t\t\t\"summer\",\n\t\t\t\t\"swedish\",\n\t\t\t\t\"synth-pop\",\n\t\t\t\t\"tango\",\n\t\t\t\t\"techno\",\n\t\t\t\t\"trance\",\n\t\t\t\t\"trip-hop\",\n\t\t\t\t\"turkish\",\n\t\t\t\t\"work-out\",\n\t\t\t\t\"world-music\"]\n    }\n    // this.handleChange = this.handleChange.bind(this);\n    this.onGenreCheck = this.onGenreCheck.bind(this);\n\t\t// this.updateRecommendations = this.updateRecommendations.bind(this);\n\t\tthis.handlePopularityChange = this.handlePopularityChange.bind(this);\n  }\n\n  // handleChange(event) {\n  //   this.setState({ maxPopularity: event.target.value });\n\t// }\n\t\n\thandlePopularityChange(value) {\n\t\tthis.setState({maxPopularity: value})\n\t}\n\n  onGenreCheck(event) {\n\t\tif (this.state.selectedGenres.includes(event.target.id)) {\n\t\t\tthis.setState({\n\t\t\t\tselectedGenres: this.state.selectedGenres.filter((_, i) => i !== this.state.selectedGenres.indexOf(event.target.id))\n\t\t\t})\n\t\t} \n\t\telse if (this.state.selectedGenres.length > 4) {\n\t\t\treturn\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tselectedGenres: [...this.state.selectedGenres, event.target.id]\n\t\t\t});\n\t\t}\n\t}\n\t\n\t// onGenreCheck(event) {\n\t// \tif (this.state.selectedGenres.length > 4) {\n\t// \t\tevent.target.checked = false\n\t// \t}\n\t// \tif (event.target.checked) {\n\t// \t\tthis.setState({\n\t// \t\t\tselectedGenres: [...this.state.selectedGenres, event.target.id]\n\t// \t\t})\n\t// \t} else {\n\t// \t\tthis.setState({\n\t// \t\t\tselectedGenres: this.state.selectedGenres.filter((_, i) => i !== this.state.selectedGenres.indexOf(event.target.id))\n\t// \t\t});\n\t// \t}\n\t// }\n\n\n  getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    e = r.exec(q)\n    while (e) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n      e = r.exec(q);\n    }\n    return hashParams;\n  }\n\n\t\n\tasync getUsersTopGenres() {\n\t\tvar availableGenres = this.state.availableGenres\n\t\tconst response = await spotifyApi.getMyTopArtists({ limit: 50, time_range: \"short_term\" });\n\t\tvar dict = {};\n\t\tresponse.items.forEach(function (artist) {\n\t\t\tartist.genres.forEach(function (genre) {\n\t\t\t\tgenre = genre.replace(\" \", \"-\");\n\t\t\t\tvar res = genre.split(\"-\");\n\t\t\t\tres.forEach(function (subGenre) {\n\t\t\t\t\tif (availableGenres.includes(subGenre)) {\n\t\t\t\t\t\tif (!(subGenre in dict)) {\n\t\t\t\t\t\t\tdict[subGenre] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdict[subGenre]++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tvar result = Object.keys(dict).sort(function (a, b) {\n\t\t\treturn dict[b] - dict[a];\n\t\t});\n\t\treturn result.slice(0, 5).join(\",\");\n\t}\n\n\n\tcomponentWillMount() {\n\t\t// Set token\n\t\tlet _token = hash.access_token;\n\t\tif (_token) {\n\t\t\tspotifyApi.setAccessToken(_token);\n\t\t\t// Set token\n\t\t\tthis.setState({\n\t\t\t\ttoken: _token\n\t\t\t});\n\t\t\tthis.getUsersTopGenres()\n\t\t\t\t.then((response) => {\n\t\t\t\t\tthis.setState({ usersFavoriteGenres: response })\n\t\t\t\t})\n\t\t}\n\n\t}\n\n  render() {\n\t\t// Render recommendation once top genres are ready\n\t\tlet recommendations;\n\t\tif (this.state.usersFavoriteGenres.length > 0) {\n\t\t\trecommendations = <Recommendations spotifyApi={spotifyApi} maxPopularity={this.state.maxPopularity} selectedGenres={this.state.selectedGenres} usersFavoriteGenress={this.state.usersFavoriteGenres} />\n\t\t} else {\n\t\t\trecommendations = null\n\t\t}\n\n    return (\n      <div class=\"container\" className=\"App\">\n\t\t\t\t{!this.state.token &&\n          <div class=\"text-white bg-dark mb-3\">\n            <a className=\"btn btn--login App-link\" href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\n              Login to Spotify\n              </a>\n          </div>\n        }\n        {this.state.token &&\n          <div>\n\t\t\t\t\t<div class=\"jumbotron\">\n\t\t\t\t\t\t\t<h1>Undiscovered Weekly</h1>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t<Genres genres={this.state.availableGenres} handleGenreCheck={this.onGenreCheck} favoriteGenres={this.state.usersFavoriteGenres} selectedGenres={this.state.selectedGenres} />\n\t\t\t\t\t\t<Popularity handlePopularityChange={this.handlePopularityChange}/>\n\t\t\t\t\t\t{/* <button type=\"button\" className=\"btn btn-primary btn-dark\" onClick={() => this.replacePlaylist(this.state.chosenPlaylist, this.state.recommendations)}>\n\t\t\t\t\t\tAdd to Playlist\n\t\t\t\t\t\t</button> */}\n\n\t\t\t\t\t\t{recommendations}\n          </div>\n\t\t\t\t}\n\t\t\t\t<footer id=\"sticky-footer\" class=\"py-4 bg-dark text-white-50\">\n\t\t\t\t\t<div class=\"container text-center\">\n\t\t\t\t\t\t<small>Made by Joe Van Gundy</small>\n\t\t\t\t\t</div>\n\t\t\t\t</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}